▶ HashMap
		HashMap 안에 구성되어 있는 요소들만 따로 뽑아내는 메소드들

		.keySet()		Key들만 모여있는 Set을 리턴
		.valuse()		Valueem들만 모여있는 Collection을 리턴
		.entrySet()		Key,Value가 하나로 모여있는 Entry들만 모여있는 Set을 리턴

▶ 컬렉션 사용시 주의할 점
		컬렉션에서는 값들이 일치한지 비교할 때 그 요소 타입의 equals()나 hashCode()로
		비교를 하기 때문에 우리가 만든 클래스에서 저 둘을 재정의하지 않는다면 주소값 비교로
		같은 요소를 찾을 수 없게 된다. 따라서 비교하고자 하는 요소를 올바르게 비교하도록
		우리가 만든 클래스에서 equals()와 hashCode()를 재정의 해서 사용한다.

▶ 빠른 for문(향상된 for문, forEach문)

		for(자료형 변수명 : 반복자) {

		}

		단순하게 모든 요소들을 순회할 때 사용하는 것이 좋다.
		순서가 중요한 경우(몇번째에 어떤 값이 있는지 알 필요가 있는 경우)에는
		기존의 for문을 이용한다.

▶ Thread(쓰레드)

▶ 프로세스
		실행된 프로그램
		운영체제로부터 시스템 자원을 할당받는 작업의 단위
		자바 프로그램은 운영체제 대신 JVM에 의해 자원을 할당받는다.

▶ 쓰레드
		프로세스의 특정한 수행 경로
		프로그램의 처리 경로
		프로그램의 흐름

▶ 멀티 쓰레드
		여러개의 경로를 가질 수 있게 한다.
		한개의 처리 경로를 여러개로 나누어 동시 작업이 가능해진다.
		웹 페이지(JSP)가 대표적인 멀티 쓰레드 응용 프로그램이다.

		하나의 프로세스를 동시에 처리하는 것처럼 보이지만
		사실은 매우 짧은 단위로 분할해서 차례로 처리한다.

▶ 장/단점
		효율성 증가
		처리량 증가
		처리비용 감소
		복잡하고 설계가 어려움
		자원의 공유문제
		교착상태(DeadLock)

▶ 교착상태
		멀티 쓰레드 중 쓰레드간의 대기상태가 종료되지 않아서
		무한정 대기만 하는 비정상적인 상태
		제어문을 통해 교착상태를 파악하고 다시 깨워준다.
					(너무 어렵고)

▶ 멀티 쓰레드 구현 방법
		1. Thread 클래스 상속
		2. Runnable 인터페이스 상속 받은 후 Thread에 넘겨주기

▶ 파일 입출력
		Writer(입력)
				FileWriter > BufferedWriter > 파일에 입력

				FileWriter		: 경로에 있는 파일을 준비시키기(쓰기 위해)
				* 파일이 없는 경우에는 그 이름대로 파일을 생성해준다.
				* 하지만 경로가 이상한 경우에는 (폴더가 잘못된 폴더인 경우)
				  폴더를 생성해 주지는 않고, 예외가 발생한다.
		
				new FileWriter("파일경로/파일명.확장자")		: 덮어쓰기 모드
				new FileWriter("파일경로/파일명.확장자",true)	: 추가 모드

				BufferedWriter : 버퍼를 이용해서 파일 작성

				.writer("문자열")	: 버퍼에 문자열 쓰기
				.close()		: 파일에 적용 / 버퍼에 있는 데이터들을
							  파일에 써주면서 버퍼 닫기

		Reader(출력)











		
