MVC
		[JSP 방식]
				a.jsp		-->		b.jsp		-->		c.jsp
								 ↑↓
								  DB
		
		- 처리도 jsp에서 하는 방식(jsp에서 DB 연결해서 사용)

				각 페이지마다 필요시 자바코드가 작성되며, DB와 연결하는 코드도
				JSP 파일 안에서 모두 작성된다. 분리되어 있지 않기 때문에
				소규모 프로젝트에는 어울리는 방식이지만 가독성이 떨어지고 분업과
				유지보수가 좋지 않으므로 규모가 커지면 불편해진다.
		
		[Model1 방식]
				a.jsp		-->		b.jsp		-->		c.jsp
								 ↑↓
							    DAO, DTO
								 ↑↓
								  DB

				b.jsp에서 DAO의 메소드를 호출함으로써 자바코드가 섞이게 된다.
				하지만 선언은 분리되어 JAVA 파일에 구현되어 있으므로 JSP 내의
				JAVA 코드의 양이 굉장히 줄어들게 된다. 하지만 페이지가 확장될수록
				유지보수가 상대적으로 좋지 않다.

		[Model2 방식]
				a.jsp	--> web.xml	--> Servlet(b.java)-Controller --> c.jsp
								 	   ↑↓
							    		 DAO, DTO
									   ↑↓
								 	    DB

				a.jsp에서 다음 페이지로 이동하기 전에 필요한 비즈니스 로직(처리를 담당하는 곳)을 
				b.java 서블릿에 완벽히 분리하여 관리한다. 요청시 알맞은 서블릿으로
				찾아가기 위해 web.xml을 참고하고 그 후 그곳에서 처리 완료된
				결과를 들고 c.jsp로 이동하여 출력하는 형태이다.

Front-Controller 패턴
		기능이 많아지면 servlet 개수가 많아지고 길어지는 문제가 발생하기 때문에
		모든 요청을 한 곳에 받아오고 하나의 컨트롤러로 다시 처리로 보내주는 패턴을 이용

			    *.do
		a.jsp	--> web.xml	--> Servlet(FrontController)
						  ↓
						if, switch(.do로 들어오는 것이 많기 때문에 나눠서 
								원하는 클래스 호출)
						  ↓
					Controller(~~~Action)



















