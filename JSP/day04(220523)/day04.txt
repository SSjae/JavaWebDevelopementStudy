쿠키(Cookie)
		클라이언트 컴퓨터에 저장
		웹 브라우저가 보관하고 있는 데이터로, 웹 서버에 요청을 보낼 때
		쿠키들을 헤더에 담아서 전송한다.
		온 쿠키들을 보고 서버에서 서버가 저장한 게 있는지 확인한다.

		서버는 쿠키를 무조건 저장할 수 있지만 클라이언트에게 쿠키 허용을 물어봐야
		고소를 당하지 않기 때문에 클라이언트에게 허용할지 안할지 물어보는 것이다.
		클라이언트가 쿠키 허용을 해야 서버가 쿠키를 저장할 수 있게 된다.
		결국 사용자에게 달려있다.

		전송은 헤더와 바디가 있는데, 헤더에는 정보나 이런 것들이고
		바디에는 실제 데이터가 포함되어 있다.

		장단점
				클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
				데이터가 사용자 컴퓨터에 저장되기 때문에 보안의 위협을 받을 수 있다.
				데이터 저장 용량에 한계가 있다.(소용량의 문자열 데이터)
				일반 사용자가 브라우저 내의 기능인 "쿠키차단"을 사용하면 무용지물이 된다.

쿠키 생성
		Cookie 객체명 = new Cookie("키", "값");

쿠키 저장
		사용자 컴퓨터에 저장해야 하므로 응답을 통해서 생성한 쿠키를 보내 저장해야 한다.
		response.addCookie(쿠키객체);

쿠키 사용
		사용자가 요청 때 함께 보내주는 요청헤더에서 쿠키를 꺼내 사용한다.
		request.getHeader("Cookie") : 요청에 있는 Header 중에서 Cookie라는 이름의
							헤더가 있는지 확인, null 이라면 전송된 쿠키가 없다는 뜻

		request.getCookies()		: 전송된 쿠키 객체들의 배열

		쿠키객체.getName()		: 쿠키의 이름(Key)
		쿠키객체.getValue()		: 쿠키의 값(Value)

쿠키 삭제
		쿠키의 유효기간을 설정해주는 방식으로 삭제
		쿠키객체.setMaxAge(n) : n초만큼 유지하다가 쿠키 삭제하도록 설정

쿠키를 수정하거나 삭제 시 쿠키객체를 다시 response를 통해 사용자 컴퓨터에 추가해주어야 한다.

Session(세션)
		내장객체로서 브라우저마다 한개씩 존재하고,
		고유한 SessionID 생성 후 정보를 추출

		쿠키는 사용자 컴에 저장하는 것이고
		세션은 서버에 공간을 할당해주고 사용자 컴에는 서버 공간에 접근할 수 있는
		정보(SessionID)를 헤더에 있는 쿠키 정보에 저장해 놓는다.
		사용자가 요청을 보낼 때 헤더에 쿠키 정보를 같이 보내면서 서버가 그 SessionID를 보고
		서버에 할당된 공간을 이용하게 된다.
		그래서 쿠키를 아예 삭제하거나 허용을 안한다면 이 세션도 사용 못한다.
		쿠키는 서버가 직접 저장을 해줘야 되지만 이 SessionID는 자동적으로 저장된다.

		장단점
				JSP에서만 접근할 수 있기 때문에 보안성이 좋고
				저장 용량의 한계가 거의 없다. 서버에 데이터를
				저장하므로 부하에 걸릴 수 있다.
				그래서 쿠키와 다르게 문자열 뿐만 아니라 객체도 가능하다.

		쿠키보다 세션을 쓰는 것이 더 안정적이다.
		계속 쓰는 것보다 필요한 정보를 저장하는 용도로만 쓰는 게 좋다.

Ajax(Asynchronous Javascript and XML)
		비동기식 자바스크립트와 XML
			비동기식 : 2개를 같이 써도 무관
		통신을 두 개로 하는 거

		빠르게 동작하는 웹 페이지를 만들기 위한 개발 기법이다.
		페이지 이동없이 비동기 통신을 통해서 서버에서 바뀔 내용(데이터)만 받아오고
		자바스크립트 DOM을 이용해 페이지의 내용을 바꿔주는 것이다.

		Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의
		일부분만을 갱신할 수 있고 백그라운드 영역에서 서버와 통신하여
		그 결과를 웹 페이지의 일부분에만 표시할 수 있다.
		이 때 서버와 데이터를 주고 받을 수 있는데 대표적인 데이터는
		JSON, XML, HTML, 텍스트 등이 있다.

Ajax의 장점
		웹 페이지를 변화시키기 위해 다시 로딩을 할 필요가 없다.
		웹 페이지가 로드된 후에 서버에 데이터 요청을 보내거나 받을 수 있다.
		다양한 UI(동적인 페이지) 구현이 가능해진다.

Ajax의 단점
		페이지의 이동이 없기 때문에 히스토리 관리가 안된다.
		반복적인 데이터를 빠르게 요청하며 느려지거나 작동하지 않게 된다.
		페이지의 이동이 없다는 것은 보안상의 문제도 발생할 수 있다는 것이다.
		
Ajax의 구성요소
		웹 페이지의 표현을 위한 HTML, CSS
		데이터의 교환을 위한 JSON, XML 등
		웹 서버와의 비동기식 통신을 위한 XMLHttpRequest 객체(뒷 길)
		통신 결과를 통해 화면 구성을 동적으로 조작하기 위한 DOM 모델

XMLHttpRequest 객체
		Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체이다.
		이 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용된다.
		웹 브라우저가 백그라운드에서 서버와 계속해서 통신할 수 있는 것은
		바로 xhr 객체를 사용하기 때문이다.

		즉 메인 길도 xhr 객체를 사용하고 있는 것이고 우리가 뒷길을 이용해
		사용하기 위해서는 xhr 객체를 새로 하나 우리가 만들어 줘야 한다.
		xhr 객체를 두개 쓰는거

XMLHttpRequest 객체 생성
		const 객체명 = new XMLHttpRequest();

서버에 요청하기
		Ajax에서는 xhr 객체를 사용해서 서버와 데이터를 교환한다.
		따라서 서버에 요청을 보내기 위해서는 먼저 xhr 객체를 생성해야 하고
		객체의 open() 메소드를 통해 통로를 열어주고 send() 메소드를 사용해서
		요청을 보내주는 과정을 거쳐야 한다.

		open()
				서버로 보낼 Ajax 요청의 형식을 설정한다.
				이 메소드로 통로를 완성

				xhr.open(전달방식, URL 주소, 비동기 여부);

				전달방식	: GET, POST, ..
				URL 주소	: 요청을 처리할 서버의 파일 주소 전달
				비동기여부	: 요청을 동기식으로 전달할 지 비동기식으로 전달할지를 선택

		send()
				작성된 Ajax 요청을 서버로 전달하는 메소드

				xhr.send();			GET 방식	- 주소창에 적어서 보내줌
				xhr.send("키=값&키=값)	POST 방식	- 주소창에 적으면 안되므로 매개변수로 넘김

		Ajax 요청시 xhr 객체는 각 상태별로 readyState가 바뀐다.
		처음에는 0(XMLHttpRequest.UNSET, 보내지 않음)이었다가 open() 메소드를
		호출하는 순간 1(XHR.OPENED)로 바뀌고 send() 호출시 순차적으로
		2(XMLHttpRequest.HEADERS_RECEIVED), 3(XMLHttpRequest.LOADING),
		4(XMLHttpRequest.DONE)로 바뀐다.
		최종적으로 readyState가 4가 된다면 상태코드(xhr.status)가
		성공을 가리키는 200이나 201일 때 응답을 확인한다.

GET 방식과 POST 방식
		GET이 기본이고 필요할 때 POST 사용
		
		GET
				주소에 데이터를 추가해서 전달하는 방식, 쿼리스트링에 포함되어
				전송되므로 길이의 제한이 있으며 주소에 데이터가 보이므로 보안상
				취약점이 존재한다.
				query string : url 뒤에 ? 이후의 문자열 "키1=값1&키2=값2&..."

		POST
				데이터를 별도로 요청 body에 첨부하여 전달하는 방식. 브라우저의
				히스토리에도 남지 않고 데이터는 쿼리 문자열과는 별도로 전송된다.
				따라서 데이터의 길이에 대한 제한도 없고 GET 방식보다 보안성도 좋다.
				하지만 GET 방식보다 상대적으로 느리다. POST로 보내진 데이터들을
				꺼내올 때에는 encoding을 먼저 거쳐준다.

		전송할 데이터의 양이 적고 노출되어도 무방하다면 GET방식을 기본으로 사용하고,
		전송할 데이터의 양이 크거나 노출이 되면 안될 데이터라면 POST 방식을 사용한다.
















