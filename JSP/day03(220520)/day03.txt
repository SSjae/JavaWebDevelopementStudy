내장 객체
		<% %> 안에서만 사용 가능
		객체화 없이 사용할 수 있는 객체이며, JSP 파일이 서블릿으로
		변환될 때 웹 컨테이너가 자동으로 메모리에 할당해서 제공한다.

		request		웹 브라우저의 요청에 대한 정보를 저장
		response		웹 브라우저 요청에 대한 응답 정보를 저장
		out			JSP 페이지 body에 출력할 내용 정보를 저장
		session		하나의 웹 브라우저의 정보를 유지하기 위한 세션 정보를 저장
		pageContext		JSP 페이지에 대한 정보를 저장
		config		JSP 페이지에 대한 설정 정보를 저장
		exception		JSP 페이지에서 예외가 발생한 경우 사용되는 객체

폼 유효성 검사
		개발자가 원하는 데이터를 사용자가 정확하게 입력했는지 검사하는 것
		DB 처리 이전에 해야하기 때문에 JavaScript로 수행한다.

쿠키(Cookie)
		클라이언트 컴퓨터에 저장
		웹 브라우저가 보관하고 있는 데이터로, 웹 서버에 요청을 보낼 때
		쿠키들을 헤더에 담아서 전송한다.
		온 쿠키들을 보고 서버에서 서버가 저장한 게 있는지 확인한다.

		서버는 쿠키를 무조건 저장할 수 있지만 클라이언트에게 쿠키 허용을 물어봐야
		고소를 당하지 않기 때문에 클라이언트에게 허용할지 안할지 물어보는 것이다.
		클라이언트가 쿠키 허용을 해야 서버가 쿠키를 저장할 수 있게 된다.
		결국 사용자에게 달려있다.

		전송은 헤더와 바디가 있는데, 헤더에는 정보나 이런 것들이고
		바디에는 실제 데이터가 포함되어 있다.

		장단점
				클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
				데이터가 사용자 컴퓨터에 저장되기 때문에 보안의 위협을 받을 수 있다.
				데이터 저장 용량에 한계가 있다.(소용량의 문자열 데이터)
				일반 사용자가 브라우저 내의 기능인 "쿠키차단"을 사용하면 무용지물이 된다.

쿠키 생성
		Cookie 객체명 = new Cookie("키", "값");

쿠키 저장
		사용자 컴퓨터에 저장해야 하므로 응답을 통해서 생성한 쿠키를 보내 저장해야 한다.
		response.addCookie(쿠키객체);

쿠키 사용
		사용자가 요청 때 함께 보내주는 요청헤더에서 쿠키를 꺼내 사용한다.
		request.getHeader("Cookie") : 요청에 있는 Header 중에서 Cookie라는 이름의
							헤더가 있는지 확인, null 이라면 전송된 쿠키가 없다는 뜻

		request.getCookies()		: 전송된 쿠키 객체들의 배열

		쿠키객체.getName()		: 쿠키의 이름(Key)
		쿠키객체.getValue()		: 쿠키의 값(Value)

쿠키 삭제












