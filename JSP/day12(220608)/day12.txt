Front-Controller 패턴
		기능이 많아지면 servlet 개수가 많아지고 길어지는 문제가 발생하기 때문에
		모든 요청을 한 곳에 받아오고 하나의 컨트롤러로 다시 처리로 보내주는 패턴을 이용

			    *.do
		a.jsp	--> web.xml	--> Servlet(FrontController)	┒ forward
						  ↓			↑	┃ redirect
						if, switch		┃	┃
						  ↓			┃	↓
		DB ↔ DAO, DTO ↔ Controller(~~~Action)━┛	c.jsp

		개발자가 정의한 확장자(.us, .bo, .do, ...)를 페이지 이동 주소에
		작성하게 되면 파일이 아니기 때문에 web.xml에 가서 매핑되어 있는
		서블릿을 찾는다. 각 URL들(UserJoin.us, UserLogin.us, ...)을
		전부 web.xml에 하나씩 매핑해놓게 되면 코드가 길어지기 때문에 *.us 형태로
		하나의 서블릿에 매핑을 해놓는다.(어떤것이든 .us가 붙은 요청은 하나의 경로로
		보내주도록 한다.) 이러한 경로를 통해 가게되는 서블릿을 프론트 컨트롤러 라고 한다.
		(가장 먼저 요청을 맞이하는 컨트롤러 라서 프론트 컨트롤러) 이 프론트 컨트롤러는
		.us 앞에 있는 요청명으로(UserJoin, UserLogin, ...) 어떤 로직을 수행할지
		판단하고 분기처리(if문, switch문)를 하게 된다. 프론트 컨트롤러 안에서 모든
		비즈니스 로직을 구현해 놓게 되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이
		어렵기 때문에 요청별로 따로 Controller(UserJoinAction, UserLoginAction)를
		만들어 놓는다. 해당 Action 안에 execute() 메소드를 만들어서 그 내부에
		비즈니스 로직을 구현하면 프론트 컨트롤러에서는 그 Action객체를 만든 후 execute()
		메소드를 호출만 하면 된다. 모든 ~~Action에 execute() 메소드를 구현해야 하기 때문에
		~~Action들의 틀을 Action 인터페이스로 만들고 그 안에 추상메소드로 execute()를
		선언해 놓으면 각 Action마다 그 인터페이스를 상속받아서 재정의를 하여 구현을 한다.

		비즈니스 로직이 모두 완료되면 어떤 페이지로 이동을 할 것인지,
		어떤 방식(forward, redirect)으로 이동한 것인지를 정해서 F-C로 리턴을 하고 이 때
		리턴할 값이 두개이므로 그 둘을 담을 객체로 만들어서 리턴을 해준다. 이 객체의 타입이
		ActionTo 타입이다. execute()는 저 결과들 즉 비즈니스 로직을 마친 후의 결과로
		판단된 경로와 방식을 통해 ActionTo 타입의 객체를 만들어서 리턴하고 그 객체를
		F-C에서 일괄적으로 받아서 해석한 후 알맞은 View와 알맞은 방식으로 페이지 이동을 해준다.

		위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에
		반영했을 때에는 오히려 좋지 않은 결과를 초래한다. 따라서 맞는 목적으로 선택하여
		설계해야 한다.

Model2의 페이지 이동 방식
		JSP와 Servlet에서 페이지 이동을 처리할 때 두가지 방식 중 하나를 사용한다.
					c.do
		(시나리오 : a.jsp ----> c.jsp) 
		Redirect
				서버에게 c.do 요청 -> 서버는 "c.jsp로 갈 수 있는 요청"을 응답
				-> 응답받은 것을 이용해서 c.jsp 재요청 -> c.jsp 응답

				클라이언트가 요청했을 때 이전의 req, resp 객체는 초기화 된다.
				시스템에 변화가 생기는 요청의 경우에는 redirect를 이용한다.
				데이터를 보내면서 Redirect를 이용하기 위해서는 세션이나 파라미터
				쿠키를 이용하면 된다.
				Insert, Update, Delete

		Forward
				서버에거 c.do 요청 -> 서버는 처리 결과를 가지고 c.jsp로 전송
				-> 전송받은 곳에서 클라이언트에게 응답

				클라이언트에게 request 객체를 통해 값을 넘겨주어야 할 때 혹은
				단순 조회를 요청했을 때 사용한다. Redirect보다 성능이 좋다.
				Select


























		