Spring - Mybatis
		SQL이 짧고 간결한 경우에는 어노테이션을 이용해서 쿼리문을 작성해준다.
		SQL이 복잡하거나 길어지는 경우에는 어노테이션보다 XML을 이용하는 것이 좋다.
		MyBatis-Spring의 경우 Mapper 인터페이스와 XML을 연동해서 동시에
		이용할 수 있다. 인터페이스객체.메소드() 를 호출하는 순간 해당하는 인터페이스의
		경로를 namespace로 가지고 있는 XML 파일로 찾아가서 메소드명과 동일한
		id를 가지고 있는 쿼리문을 수행하여 결과로 돌려준다.

		직접적으로 sqlsession은 사용하지 않는다.

		MyBatis는 내부적으로 JDBC의 PreparedStatement를 이용해서 SQL를 처리한다.
		따라서 SQL에 전달되는 파라미터는 JDBC에서와 같이 ? 로 치환되어서 처리된다.
		복잡한 SQL의 경우 ?로 나오는 값이 제대로 전달되었는지 확인하기가 쉽지 않고
		실행한 SQL의 내용을 정확히 확인하기 어렵다. 따라서 log4jdbc-log4j2
		라이브러리를 사용하여 어떤 값들이 전달되었고, 어떤 쿼리문이 수행되었는지를
		확인할 수 있다.

스프링 MVC 기본 구조
		스프링 프레임워크는 하나의 기능을 위해서만 만들어진 프레임워크가 아닌
		'코어' 라고 할 수 있는 여러 서브 프로젝트들을 결합해서 다양한 상황에
		대처할 수 있도록 개발되었다. 그 중 하나가 스프링 MVC 구조이다.
		
		스프링 MVC
		[Spring MVC]		- WEB 관련 영역
		[Spring Core]		- 일반 JAVA 영역(POJO)
		[Spring-MyBatis]
		[MyBatis]		
		[DB] 

스프링의 구동 순서, 과정
		프로젝트 구동은 web.xml 에서 시작한다. web.xml 상단에는 가장 먼저 구동되는
		Context Listener가 등록되어 있다.

		1) ContextLoaderListener는 해당 웹 어플리케이션을 구동하게 되면 같이
		작동이 시작되므로 해당 프로젝트를 실행하면 가장 먼저 로그를 출력하면서 실행한다.
		--> 여기서 root-context를 부름

		2) root-context.xml이 처리되면 파일에 있는(설정해 놓은) Bean들이 작동한다.
		
		3) root-context.xml이 처리된 후에는 DispatcherServlet이라는 서블릿과
		관련되어 설정이 작동한다. MVC 구조에서 가장 핵심적인 역할을 하는 클래스이며
		내부적으로 앱 관련 처리의 준비 작업을 진행한다. 내부적으로 웹 관련 처리의
		준비 작업을 진행하기 위해 사용하는 파일이 있고 servlet-context.xml이다.

		4) DispatcherServlet에서 XmlWebApplicationContext를 이용해서
		Servlet-context.xml을 로딩하고 해석한다. 이 과정에서 등록된 객체(Bean)들을
		기존에 만들어진 객체(Bean)들과 같이 연동하게 된다.

Front-Controller 패턴
		
			     HandlerMapping
				↑		↓
Client -> DispatcherServlet <- HandlerAdapter ↔ Controller
 ↑		      	↓
 └─────── View <- ViewResolver

1. 사용자의 Request는 Front-Controller인 DispatcherServlet을 통해 처리한다.

2. HandlerMapping은 Request의 처리를 담당할 컨트롤러를 찾기 위해 존재한다.

3. HandlerMapping 인터페이스를 구현한 여러 객체중 @RequestMapping 이라는
어노테이션이 적용된 것을 기준으로 판단하며, 적절한 컨트롤러를 찾았다면 HandlerAdapter를
이용해서 해당 컨트롤러를 동작시킨다

	컨트롤러에서는 데이터를 받고 뷰만 결정하는 거고 정작 비즈니스 로직은
	또 따로 빼서 Service로 한다.

4. Controller의 처리가 완료되었다면 어디로, 어떻게 갈 것인지 라는 결과가 나오고
그 결과가 ViewResolver가 리턴을 통해 받아서 어떤 View에서 처리하는 것이 좋을지
해석을 해준다.

5. 해석된 결과를 가지고 실제 응답을 보내야 하는 데이터를 JSP 등을 이용해서 생성해준다.

6. 만들어진 응답(페이지)을 DispatcherServlet을 통해서 응답해준다.




































