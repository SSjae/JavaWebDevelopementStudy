스프링 프레임워크

[학습 목표]
		스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
		스프링에서 XML을 이용하는 객체 관리 방법
		스프링의 JUnit 테스트 환경 구축
		스프링 MVC 모델에 대한 이해와 구현

프레임 워크
		뼈대나 근간을 이루는 코드들의 묶음
		개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라
		프로젝트 결과 역시 큰 차이를 낳는다. 이런 상황을 극복하기 위한
		코드의 결과물이 바로 프레임워크이다. 프로그램의 기본 흐름이나
		구조를 정하고 모든 팀원들이 이 구조에 자신의 코드를 추가하는
		방식으로 개발하게 된다.

프레임 워크의 장점
		개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 실력이 부족한
		개발자라 하더라도 반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의
		개발이 가능하다. 회사 입장에서는 프레임워크를 사용하면 일정한 품질이
		보장되는 결과물을 얻을 수 있고, 개발자 입장에서는 완성된 구조에
		자신이 맡은 코드를 개발해서 넣기 때문에 로직에만 집중할 수 있고
		개발 시간을 단축할 수 있다.

스프링 프레임워크
		경량 프레임워크(light-weight)
		예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록
		만들다 보니 하나의 기능을 위해서 너무 많은 구조가 필요했다. 기술이 너무나
		복잡하고 방대했기 때문에 전체를 이해하고 개발하기에는 어려움이 많았다.
		그래서 스프링 프레임워크가 등장했고, 특정 기능을 위주로 간단한 JAR파일 등을
		이용해서 모든 개발이 가능하도록 구성되어 있다.
		MyBatis와 같은 파일들과 연결되는 것을 미리 구축해놓음

스프링 프레임워크의 장점
		복잡함에 반기를 들어서 만들어진 프레임워크
		프로젝트 전체 구조를 설계할 때 유용한 프레임워크
		다른 프레임워크들의 포용(여러 프레임워크를 혼용해서 사용가능- 접착성)
		개발 생산성과 개발 도구의 지원

스프링 프레임워크의 특징
		POJO 기반의 구성
		의존성 주입(DI)을 통한 객체 간의 관계 구성
		AOP 지원
		편리한 MVC 구조
		WAS에 종속적이지 않은 개발 환경
		
STS(Spring Tool Suite) 설치
		외부 프로그램도 있고 내부 플러그인도 있음
		지금은 이클립스에서 내부 플러그인으로 설치

		eclipse 플러그인으로 설치
		Help > Eclipse Marketplace > STS 검색 > Install
		> Next > ... > 경고창 뜨면 Install Anyway 클릭
		> (알수없는 창이 뜬다면 무지성 동의 후 next) > Restart Now

POJO(Plain Old Java Object) 기반의 구성
		오래된 방식의 간단한 자바 객체
		Java 코드에서 일반적으로 객체를 구성하는 방식을 스프링에서도
		그대로 사용할 수 있다는 말이다.

의존성 주입(DI)을 통한 객체 간의 관계 구성
		의존성(Dependency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을
		할 수 없다는 것을 의미한다. 예를 들어 A 객체가 B 객체 없이 동작이
		불가능한 상황을 'A가 B에 의존적이다' 라고 표현한다.
		이때 B 클래스가 수정이 된다면 의존적이기 때문에 A 클래스도 수정을 해줘야하며
		만약 여러 객체가 의존한다면 모든 클래스들을 다 수정해줘야 한다.

		주입(Injection)은 말 그대로 외부에서 밀어 넣는 것을 의미한다. 예를 들어
		어떤 객체가 필요로 하는 객체를 외부에서 밀어 넣는 것을 의미한다.
		받는 입장에서는 어떤 객체인지 신경쓸 필요가 없고 어떤 객체에 의존하든
		자신이 하던 역할은 변하지 않게 된다.

		1. 생성자를 외부에서 만들어줘서 매개변수에 넣어준다.
		   그렇게 되면 각 클래스들을 바꿔줄 필요 없다.
		2. setter
		   setter를 이용해서 세팅만 잘해주면 굳이 클래스 내부를 수정할 필요 없다.

		하지만 이 방법들은 클래스들을 수정할 필요는 없지만 만들 때의 객체들은 수정을
		해줘야 한다. but, spring에서는 이것조차 자동으로 수정해준다.

		* 의존
		ⓐ---------------------->ⓑ
		a 객체에서 b 객체를 직접 생성

		* 의존성 주입
		ⓐ-------->??????<-------ⓑ
		a가 b를 필요로 한다는 신호를 보내고, b객체를 주입하는 것은 외부에서 이루어짐

		의존성 주입방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다.
		스프링 프레임워크에서는 ApplicationContext가 ???라는 존재이며,
		필요한 객체를 생성하고 주입까지 해주는 역할을 한다. 따라서 개발자들은
		기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고, 이러한 객체들을
		엮는(Wiring) 작업의 형태로 개발하게 된다.

		ApplicationContext가 관리하는 객체들을 '빈(Bean)'이라고 부르고,
		빈과 빈 사이의 의존 관계를 처리하는 방식으로 XML, Java 코드, 어노테이션 방식을
		이용할 수 있다.

AOP의 지원
		Object Oriented Programing
		객체 지향 프로그래밍

		Aspect Oriented Programing
		관점 지향 프로그래밍
		예외 처리 같은 것을 각 요청마다 하는 것이 아니라 하나로 묶어서
		따로 처리하는 것(관점)
		좋은 개발환경에서는 개발자가 비즈니스 로직에만 집중할 수 있게 한다.
		스프링 프레임워크는 반복적인 코드를 제거해줌으로써 핵심 비즈니스 로직에만
		집중할 수 있는 방법을 제공한다. 보안이나 로그, 트랜잭션과 같이
		비즈니스 로직은 아니지만 반드시 처리가 필요한 부분들을 횡단 관심사(cross-concern)
		라고 한다. 스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이
		가능하고 횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.
		이를 통해 3가지의 이점이 생긴다.
				1) 핵심 비즈니스 로직에만 집중하여 코드 개발
				2) 각 프로젝트마다 다른 관심사를 적용할 시 코드 수정 최소화
				3) 원하는 관심사의 유지보수가 수월한 코드 구성이 가능

트랙잭션의 지원
		먼저 트랜잭션에 올려놓고 오류 없이 트랜잭션에 올라가면
		그때 커밋을 해준다.
		DB 작업시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
		어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.









