객체
		추상적인 개념이 실체화 된 것
		프로퍼티(자바에서 필드)들로 이루어진 하나의 집합

객체 선언
		리터럴을 이용한 객체 생성
		const 객체명 = {
				프로퍼티1명:프로퍼티1값,
				프로퍼티1명:프로퍼티1값,
				...,
				메소드명: function() {

				},
				...
		}

		자바 스크립스에는 클래스가 따로 없고 글자로만 클래스가 존재한다.
		클래스를 써서 만들면 자동으로 생성자를 만드는 코드로 변환되서 실행된다.
		그래서 사실 클래스는 없고 생성자만 있는 것이다.

생성자를 이용한 객체 생성
		자바 class		: 붕어빵 틀
		js 생성자		: 붕어빵 제조법

		생성자를 위부터 차례대로 읽으면서 실행
		그래서 객체를 만들고 프로퍼티를 만든다.
		안에 아무것도 없다면 프로퍼티 없이 객체만 만들어지는 것이다

		function 생성자명(매개변수1, 매개변수2, ..) {
				this.변수명 = 값1;
				this.변수명 = 값2;
				...
				this.메소드명 = function() {};
		}

상속(inheritance)
		자바 스크립트는 객체간의 상속이 일어난다.
		자바 스크립트의 모든 객체는 프로토타입 이라는 객체를 상속받고
		있으며, 모든 객체는 프로토타입으로부터 프로퍼티와 메소드를
		상속받는다.

		우리가 생성자를 만들고 실행시키면 거기에 맞는 객체가 자동으로
		만들어진다. --> 이게 프로토타입

		우리가 이제 생성자를 이용해 진짜 객체를 만들게 되면 처음에 만들어진
		프로토타입을 상속해서 사용된다.
		그래서 새롭게 프로퍼티를 추가하면 진짜 객체 밑에 필드가 만들어진 것이다.

프로토타입 기반
		const mycar = new Car();

		Car.prototype	--> 생성자를 만들때 생기는 것
			↓
		    mycar

		프로토타입 기반 언어는 클래스라는 개념이 없고, 객체에서 객체를
		바로 상속받을 수 있다. 따라서 자바스크립트는 현재 존재하고 있는
		객체를 프로토타입으로 사용하며 해당 객체를 복제 후 재사용한다.

window 객체
		웹 브라우저의 창(window)을 나타내는 객체로, 대부분의 웹 브라우저에서 지원한다.
		자바스크립트의 모든 객체, 전역함수, 전역변수들은 자동으로 window객체의
		프로퍼티가 되고 window객체의 메소드는 전역함수, window객체의 프로퍼티는
		전역변수가 된다.

window.onload
		on:~할 때, onload(어떤 문서가 로딩될 때)
		window.onload = function() {
				문서가 로딩된 이후에 호출할 문장
		}

		스크립트 언어는 위에서 아래로 해석되기 때문에 DOM에서 HTML 요소를 추출할 때
		body보다 위에 있다면 해석 순서에서 문제가 생길 수 있다. 이 경우 자바스크립트
		문서를 밑으로 옮겨야 하는데, html 문서가 길어지면 가독성도 좋지 않고 불편한다.
		따라서 문서가 다 준비된 상황 이후에 발동하게끔 하는 역할을 한다.

window.open()
		새로운 브라우저 창을 열 수 있으며, 그 창의 세부적인 옵션들도 설정할 수 있다.
		
		window.open(url, name, specs, replace);

		url		: 열어줄 주소
		name		: 열리는 창의 이름
				_blank : 새창에서 열림
				_child : 자식 프레임
				_parent : 부모 프레임
				_self	  : 현재 창에서 열림
		specs		: 선택적인 값으로 창의 크기, 스크롤 여부, 리사이즈 여부 등등을 지정
		replace	: 히스토리 목록에 새 항목을 만들지, 현재 항목을 대체할지 지정
					웬만해서는 true






















