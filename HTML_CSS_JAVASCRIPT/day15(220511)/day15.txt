자바 스크립트(Javascript)
		웹의 동작을 구현하기 위한 언어
		웹 브라우저에 자바스크립트 인터프리터(JS 코드를 해석하는)가 내장
		객체 기반의 스크립트 언어

자바 스크립트의 특징
		자바 스크립트는 동적이며, 타입을 명시할 필요가 없는 인터프리터 언어이다.
		객체 지향형 프로그래밍과 함수형 프로그래밍을 모두 표현할 수 있다.
		그래서 객체 지향이 아닌 객체 기반이다.
		HTML의 내용, 속성, 스타일 등을 변경할 수 있다.

자바 스크립트의 선언
		[과거]
		<script language="javascript">
				// 자바스크립트 문법으로 해석
		</script>

		[현재]
		<script>
				// 자바스크립트 문법으로 해석
		</script>

		<script src="경로/파일명.js"></script>		

자바 스크립트의 출력
		document.write()						<body>
		window.alert()						대화상자
		HTML DOM요소를 이용한 innerHTML 프로퍼티		대상 태그
		console.log()						console 창

자바 스크립트 주의사항
		;(세미클론)을 생략 가능하다.
		스크립트 태그 위치는 어디든 상관없다.
		대소문자를 구분한다.

변수의 선언
		var 변수명 = 값;

		var num;
		num = 10;

		num = 10;
		var num;

		let 변수명 = 값;
		const 상수명 = 값;

자료형(값의 타입)
		변수의 타입은 없고 값은 타입이 있다.

		숫자(Number)
				정수와 실수를 구분하지 않는다.
		문자열(String)
				큰 따옴표와 작은 따옴표의 차이가 없다.
		불린(Boolean)
				true / false
		객체(Object) - 자바와 다르게 클래스가 없이 객체를 만들 수 있다.
				여러 변수 혹은 메소드를 선언한 집합의 주소를 가지는 타입이다.
				필드 접근시 .(마침표)을 사용한다.
		undefined
				타입이 정해지지 않은 것을 의미하는 값이다.
				let num; --> 출력했을 때 undefined가 나옴
		null
				주소값이 정해지지 않은 것을 의미하는 값이다.(null로 변수를 초기화한 경우)
				let num = null;

형변환
		자바 스크립트의 변수는 타입이 정해져 있지 않으며, 같은 변수에
		다른 타입의 값을 다시 대입할 수도 있다.
		(typeof 값) --> 뒤에 오는 값의 타입

		자동 형변환
				다른 타입의 값이 오면, 자동으로 타입을 변환하여 사용한다.
				(자바 스크립트는 자동 형변환이 자주 이용된다.)

				let s1 = "20"
				let s2 = "10"

				s1+s2		2010
				s1*s2		200		--> 문자열 끼리의 곱셈연산은 불가하므로 숫자로 자동형변환 후 연산
		
		강제 형변환
				자동으로 타입 변환을 지원하지만 명시적으로 변환할 필요가 있을 때 사용

				Number(값)
				String(값)
				Object(값)
				Boolean(값)
				parseInt(문자열)		문자열을 정수로
				parseFloat(문자열)	문자열을 실수로
------------------------------------------------------------------------------------------------
let 과 const
		var는 같은 이름의 변수를 재선언 할 수 있다.
		var는 제어문 영역에서의 지역변수와 전역변수의 구별이 되지 않는다.
		이러한 암묵적인 오류 허용을 하기 싫다면 <script> 바로 아래에
		'use strict'를 작성하면 엄격모드로 해석을 한다.

		스코프(scope) 와 호이스팅(hoisting)

				스코프
						변수에 접근할 수 있는 범위, 변수의 생명주기,
						변수의 유효범위	{ }

				호이스팅
						변수나 함수의 선언이 어디에 있든 상관없이
						다른 코드들보다 가장 먼저 끌어 올려져서 실행되는 특징

						vat num = 10;
						선언 단계		공간 확보
						초기화 단계		undefined 넣기
						할당 단계		10이 대입

						선언단계가 무조건 맨 처음에 실행된다는 것이 호이스팅

		let		: 이론적으로는 호이스팅이 되지만 실제로는 안 된다. 
				  재할당(대입) 가능


				let a = "test";
				let a = "hello";		--> 오류
				a = "banana";		--> 가능

		const 	: 재할당 불가능
	
				const b = "test";
				const b = "hello";	--> 오류
				b = "banana";		--> 오류

연산자
		==	타입이 달라도 값이 같으면 참
		!=	값이 달라야 참
		===	타입과 값이 둘 다 같아야 참 
		!==	타입이나 값이 다르다면 참

NaN(Not a Number)
		console.log(10 * "Hello");		--> NaN

		isNaN(값) : 숫자가 아니라면 참, 숫자면 거짓

		isNaN(3) === false
		isNaN("3") === false
		isNaN("") === false ("" --> 0 : 완벽히 0과 일치하는 것은 아님)
		isNaN(" ") === false (" " --> 0 : 완벽히 0과 일치하는 것은 아님)
-----------------------------------------------------------------------------------------------
대화상자(dialog)
		window. 은 생략 가능

		alert()
				사용자에게 간단한 메세지를 보여주고,
				그에 대한 사용자의 확인을 기다린다.
		
		confirm()
				사용자에게 간단한 메세지를 보여주고,
				확인을 누르면 true, 취소를 거짓을 false를 return한다.

		prompt()
				사용자에게 간단한 메세지를 보여주고,
				사용자가 입력한 문자열 값을 리턴한다.

과제
		이름, 국어점수, 영어점수, 수학점수 입력받은 후
		body에

		이름 : 김사과
		국어점수 : 100점
		영어점수 : 90점
		수학점수 : 81점
		총점 : 271점
		평균 : 90.333점







